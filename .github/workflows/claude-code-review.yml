name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/review')) ||
      (
        github.event_name == 'pull_request' &&
        !github.event.pull_request.draft &&
        !contains(github.event.pull_request.title, '[skip review]') &&
        !contains(github.event.pull_request.title, '[WIP]') &&
        !contains(github.event.pull_request.title, '[wip]') &&
        !(github.event.pull_request.head.ref == 'release-candidate' && github.event.pull_request.base.ref == 'main')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            # コードレビューガイドライン

            あなたは経験豊富なソフトウェアエンジニアとして、Pull Request に含まれるコードをレビューします。
            対象は**駆け出しエンジニアが作成したコード**であり、主に「コードが正しく動作するか」に焦点を当ててください。

            ---
            ## 🚫 禁止事項
            - 絶対に**具体的なコード例や修正コード**を出力しないでください。
            - レビューコメントは常に**抽象的な指摘や方向性**に留めてください。

            ---
            ## 🔍 レビュー観点

            ### 重要度：高（必ず指摘）
            - **動作しないコード**
              - 構文エラー、未定義メソッド、型ミスマッチ、マイグレーション不整合など
            - **ロジックエラー**
              - 無限ループ、条件分岐の誤り、境界値処理ミスなど

            ### 優先度の低い項目（コメント不要）
            - インデントや改行などの軽微なスタイル
            - コメントの有無や命名規則の細部

            ---
            ## 🧭 レビュー方針
            - 「コードが正しく動作するか」を最優先で判定する。
            - コードのスタイルや最適化は優先しない。
            - テスト結果や明らかなエラーに基づいて判断する。
            - 目的は**動作確認に基づいたレビュー**であること。

            ---
            ## 🧾 出力フォーマット（この形式を厳守）
            - あなたの最終出力は、必ず以下のテキストにしてください。
              例：
                - 結論: success

            ---
            ## ✅ 結論
            コードが動いていたらsuccess, 失敗していたらfailureのテキストだけを返してください。

      - name: Parse Claude Execution File and Check Conclusion
        id: parse_and_fail
        run: |
          EXECUTION_FILE="${{ steps.claude.outputs.execution_file }}"

          echo "=== Claude Execution File (RAW) ==="
          cat "$EXECUTION_FILE"
          echo "==================================="

          RESULT=$(cat "$EXECUTION_FILE" | jq -r '.[] | select(.type=="result") | .result')
          CONCLUSION=$(echo "$RESULT" | grep -Eo '(結論|conclusion)\s*[:：]\s*(success|failure)' | grep -Eo '(success|failure)')
          echo "=== Extracted Conclusion ==="
          echo "$CONCLUSION"
          echo "========================"

          # 結論が 'failure' なら、非ゼロの終了コードを返してジョブを失敗させる
          if [ "$CONCLUSION" = "failure" ]; then
            echo "🔴 レビュー結果が 'failure' です。このジョブを失敗としてマークします。"
            exit 1
          elif [ "$CONCLUSION" = "success" ]; then
            echo "🟢 レビュー結果が 'success' です。処理を続行します。"
          else
            echo "⚠️ 結論の値が 'success' または 'failure' ではありません: $CONCLUSION"
            exit 1
          fi
