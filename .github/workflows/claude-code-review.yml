name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/review')) ||
      (
        github.event_name == 'pull_request' &&
        !github.event.pull_request.draft &&
        !contains(github.event.pull_request.title, '[skip review]') &&
        !contains(github.event.pull_request.title, '[WIP]') &&
        !contains(github.event.pull_request.title, '[wip]') &&
        !(github.event.pull_request.head.ref == 'release-candidate' && github.event.pull_request.base.ref == 'main')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            # コードレビューガイドライン

            あなたは経験豊富なソフトウェアエンジニアとして、Pull Request に含まれるコードをレビューします。
            対象は**駆け出しエンジニアが作成したコード**であり、主に「コードが正しく動作するか」に焦点を当ててください。

            ---
            ## 🚫 禁止事項
            - 絶対に**具体的なコード例や修正コード**を出力しないでください。
            - レビューコメントは常に**抽象的な指摘や方向性**に留めてください。

            ---
            ## 🔍 レビュー観点

            ### 重要度：高（必ず指摘）
            - **動作しないコード**
              - 構文エラー、未定義メソッド、型ミスマッチ、マイグレーション不整合など
            - **ロジックエラー**
              - 無限ループ、条件分岐の誤り、境界値処理ミスなど

            ### 優先度の低い項目（コメント不要）
            - インデントや改行などの軽微なスタイル
            - コメントの有無や命名規則の細部

            ---
            ## 🧭 レビュー方針
            - 「コードが正しく動作するか」を最優先で判定する。
            - コードのスタイルや最適化は優先しない。
            - テスト結果や明らかなエラーに基づいて判断する。
            - 目的は**動作確認に基づいたレビュー**であること。

            ---
            ## 🧾 出力フォーマット（この形式を厳守）
            - あなたの最終出力は、必ず以下のJSON形式にしてください。
              例：
              {
                "動作しないコードがあるか": "はい",
                "ロジックエラーがあるか": "いいえ",
                "Ruby on Rails に沿ったコードが書かれていないか": "はい",
                "conclusion": "failure"
              }

            ### コメント
            （ここに抽象的なアドバイスや改善の方向性を記述する。ただし具体的なコード例は書かない）

            ---
            ## ✅ 結論
            - すべてのチェック項目に基づき、全て「いいえ」なら conclusion を "success"、1つでも「はい」がある場合は "failure" にしてください。
            - 上記JSON以外の文は出力しないでください。

      - name: Parse Claude Execution File and Check Conclusion
        id: parse_and_fail
        run: |
          EXECUTION_FILE="${{ steps.claude.outputs.execution_file }}"

          echo "=== Claude Execution File (RAW) ==="
          cat "$EXECUTION_FILE"
          echo "==================================="

          JSON_CONTENT=$(sed -n '/```json/,/```/p' "$EXECUTION_FILE" | grep -v '```')

          # JSONコンテンツが空でないことを確認
          if [ -z "$JSON_CONTENT" ]; then
            echo "🔴 エラー: JSONコードブロックが見つかりませんでした。レビュー出力を確認してください。"
            exit 1
          fi

          echo "=== JSON Content Extracted ==="
          echo "$JSON_CONTENT"
          echo "=============================="

          # 抽出したJSONから conclusion を jq で安全に抽出
          conclusion=$(echo "$JSON_CONTENT" | jq -r '
            .conclusion // "unknown"
          ')

          echo "Claudeレビュー結論: $conclusion"

          if [ "$conclusion" = "failure" ]; then
            echo "🔴 レビュー結果が 'failure' です。このジョブを失敗としてマークします。"
            exit 1
          elif [ "$conclusion" = "success" ]; then
            echo "🟢 レビュー結果が 'success' です。処理を続行します。"
          else
            echo "⚠️ 結論の値が 'success' または 'failure' ではありません: $conclusion"
            # 不正な結論も失敗と見なす
            exit 1
          fi
